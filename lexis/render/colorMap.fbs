/* Copyright (c) 2015-2016, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Cyrille Favreau <cyrille.favreau@epfl.ch>
 *                     Ahmet Bilgili <ahmet.bilgili@epfl.ch>
 *                     Juan Hernando <juan.hernando@epfl.ch>
 *
 * This file is part of Brayns <https://github.com/BlueBrain/Brayns>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

namespace lexis.render.detail;

// Control points
table ControlPoint
{
    x: float; // The data position. i.e if data is between 0 and 255, x values will be
              // between 0 and 255.
    y: float; // In general color values between 0.0 and 1.0f but it can also be used
              // for other purposes.

}

// A transfer function can refer to some rendering
// parameter that may not be channel (as RGBA).
table TransferFunction
{
    attribute: string;
    points: [ControlPoint];
}

// 4 channel, 1 dimensional color map defined with control points. Control points
// hold 2 dimensional information ( x, y ). x corresponds to position of the color
// in data range, y corresponds to color value in floating point values [0.0, 1.0].
table ColorMap
{
    red:   [ControlPoint];
    green: [ControlPoint];
    blue:  [ControlPoint];
    alpha: [ControlPoint];
}

// Range of values for which the transfer function applies. i.e if the
// control point, x values are between -100.0f and 200.0f, and user wants
// to work in details in range 5.0f and 20.0f, this range can be set using
// this event.
table Threshold
{
    min: float;
    max: float;
}
